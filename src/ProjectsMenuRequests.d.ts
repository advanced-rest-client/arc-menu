/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   src/ProjectsMenuRequests.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {ArcMenuBase} from './ArcMenuBase.js';

import {RequestsListMixin} from '@advanced-rest-client/requests-list-mixin/requests-list-mixin.js';

import {AnypointMenuMixin} from '@anypoint-web-components/anypoint-menu-mixin/anypoint-menu-mixin.js';

export {ProjectsMenuRequestsWrapper};

declare class ProjectsMenuRequestsWrapper {
  render(): any;
}

export {ProjectsMenuRequests};

declare namespace UiElements {

  /**
   * A list of requests related to a project in the ARC main menu.
   *
   * The element requires the `arc-models/project-model` element to be present
   * in the DOM to update requests order.
   *
   * ### Example
   *
   * ```
   * <projects-menu-requests
   *  projectid="some-id"
   *  selectedrequest="id-of-selected"></projects-menu-requests>
   * ```
   */
  class ProjectsMenuRequests extends
    RequestsListMixin(
    Object) {

    /**
     * Computed value. True if query ended and there's no results.
     */
    readonly dataUnavailable: boolean|null|undefined;
    draggableEnabled: any;

    /**
     * Current project ID
     */
    projectId: string|null|undefined;

    /**
     * True if the element currently is querying the datastore for the data
     */
    querying: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;
    _draggableChanged(value: any): void;
    _addDndEvents(): void;
    _removeDndEvents(): void;
    loadRequests(): void;

    /**
     * Queries for the data when state or `projectId` changes
     */
    _queryData(): any;

    /**
     * Called when the user clicks on an item in the UI
     */
    _openHandler(e: ClickEvent|null): void;

    /**
     * Removes drop pointer from shadow root.
     */
    _removeDropPointer(): void;

    /**
     * Removes drop pointer to shadow root.
     *
     * @param ref A list item to be used as a reference point.
     */
    _createDropPointer(ref: Element|null): void;

    /**
     * Handler for `dragover` event on this element. If the dagged item is compatible
     * it renders drop message.
     */
    _dragoverHandler(e: DragEvent|null): void;

    /**
     * Handler for `dragleave` event on this element.
     */
    _dragleaveHandler(e: DragEvent|null): void;

    /**
     * Handler for `drag` event on this element. If the dagged item is compatible
     * it adds request to saved requests.
     */
    _dropHandler(e: DragEvent|null): void;

    /**
     * Updates project and request objects and inserts the request at a position.
     *
     * @param index The position in requests order
     * @param request Request to update
     * @param forceRequestUpdate Forces update on request object even
     * when position hasn't change.
     */
    _insertRequestAt(index: Number|null, request: object|null, forceRequestUpdate: Boolean|null): Promise<any>|null;

    /**
     * Handler for the `dragstart` event added to the list item when `draggableEnabled`
     * is set to true.
     * This function sets request data on the `dataTransfer` object with `arc/request-object`
     * mime type. The request data is a serialized JSON with request model.
     */
    _dragStart(e: Event|null): void;
    _dropTargetTemplate(): any;
    _unavailableTemplate(): any;
    _listTemplate(): any;
    render(): any;
  }
}
